;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_getXMotionFromDirection
	.export		_getYMotionFromDirection
	.export		_getCollisionBallDirection

; ---------------------------------------------------------------
; signed short __near__ getXMotionFromDirection (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getXMotionFromDirection: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; switch(direction)
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
;
; }
;
	bne     L00EA
;
; }
;
	jmp     incsp2
;
; }
;
L00EA:	cmp     #$01
	beq     L000B
	cmp     #$02
	beq     L0013
	cmp     #$03
	beq     L001B
	cmp     #$04
	jeq     L0023
	cmp     #$05
	beq     L001B
	cmp     #$06
	beq     L0013
	cmp     #$07
	beq     L000B
	cmp     #$08
	jeq     L00E8
	cmp     #$09
	beq     L0026
	cmp     #$0A
	jeq     L002E
	cmp     #$0B
	jeq     L0036
	cmp     #$0C
	jeq     L003E
	cmp     #$0D
	jeq     L0036
	cmp     #$0E
	beq     L002E
	cmp     #$0F
	beq     L0026
	jmp     L00E8
;
; return (signed short)(((signed short)-98*(signed short)velocity) >> (signed short)8);
;
L000B:	lda     (sp,x)
	jsr     pusha0
	ldx     #$FF
	lda     #$9E
	jsr     tosmulax
	cpx     #$80
	txa
	ldx     #$00
	bcs     L00EB
;
; }
;
	jmp     incsp2
;
; return (signed short)(((signed short)-98*(signed short)velocity) >> (signed short)8);
;
L00EB:	dex
	jmp     incsp2
;
; return (signed short)(((signed short)-181*(signed short)velocity) >> (signed short)8);
;
L0013:	lda     (sp,x)
	jsr     pusha0
	ldx     #$FF
	lda     #$4B
	jsr     tosmulax
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0004
	dex
	jmp     incsp2
;
; return (signed short)(((signed short)-236*(signed short)velocity) >> (signed short)8);
;
L001B:	lda     (sp,x)
	jsr     pusha0
	ldx     #$FF
	lda     #$14
	jsr     tosmulax
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0004
	dex
	jmp     incsp2
;
; return -(signed short)velocity;
;
L0023:	lda     (sp,x)
	dex
	eor     #$FF
	clc
	adc     #$01
	bne     L0004
	inx
	jmp     incsp2
;
; return (signed short)(((signed short)98*(signed short)velocity) >> (signed short)8);
;
L0026:	lda     (sp,x)
	jsr     pusha0
	lda     #$62
	jsr     tosmula0
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0004
	dex
	jmp     incsp2
;
; return (signed short)(((signed short)181*(signed short)velocity) >> (signed short)8);
;
L002E:	lda     (sp,x)
	jsr     pusha0
	lda     #$B5
	jsr     tosmula0
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0004
	dex
	jmp     incsp2
;
; return (signed short)(((signed short)236*(signed short)velocity) >> (signed short)8);
;
L0036:	lda     (sp,x)
	jsr     pusha0
	lda     #$EC
	jsr     tosmula0
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0004
	dex
	jmp     incsp2
;
; return (signed short)velocity;
;
L003E:	lda     (sp,x)
	jmp     incsp2
;
; return 0;
;
L00E8:	txa
;
; }
;
L0004:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; signed short __near__ getYMotionFromDirection (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getYMotionFromDirection: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; switch(direction)
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
;
; }
;
	beq     L004C
	cmp     #$01
	beq     L004F
	cmp     #$02
	beq     L0057
	cmp     #$03
	jeq     L005F
	cmp     #$04
	beq     L00ED
	cmp     #$05
	jeq     L0067
	cmp     #$06
	jeq     L006F
	cmp     #$07
	jeq     L0077
	cmp     #$08
	jeq     L007F
	cmp     #$09
	jeq     L0077
	cmp     #$0A
	jeq     L006F
	cmp     #$0B
	beq     L0067
	cmp     #$0C
	beq     L00ED
	cmp     #$0D
	beq     L005F
	cmp     #$0E
	beq     L0057
	cmp     #$0F
	beq     L004F
	jmp     incsp2
;
; return 0;
;
L00ED:	txa
	jmp     incsp2
;
; return -(signed short)velocity;
;
L004C:	lda     (sp,x)
	dex
	eor     #$FF
	clc
	adc     #$01
	beq     L00EE
;
; }
;
	jmp     incsp2
;
; return -(signed short)velocity;
;
L00EE:	inx
	jmp     incsp2
;
; return (signed short)(((signed short)-236*(signed short)velocity) >> (signed short)8);
;
L004F:	lda     (sp,x)
	jsr     pusha0
	ldx     #$FF
	lda     #$14
	jsr     tosmulax
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0045
	dex
	jmp     incsp2
;
; return (signed short)(((signed short)-181*(signed short)velocity) >> (signed short)8);
;
L0057:	lda     (sp,x)
	jsr     pusha0
	ldx     #$FF
	lda     #$4B
	jsr     tosmulax
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0045
	dex
	jmp     incsp2
;
; return (signed short)(((signed short)-98*(signed short)velocity) >> (signed short)8);
;
L005F:	lda     (sp,x)
	jsr     pusha0
	ldx     #$FF
	lda     #$9E
	jsr     tosmulax
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0045
	dex
	jmp     incsp2
;
; return (signed short)(((signed short)98*(signed short)velocity) >> (signed short)8);
;
L0067:	lda     (sp,x)
	jsr     pusha0
	lda     #$62
	jsr     tosmula0
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0045
	dex
	jmp     incsp2
;
; return (signed short)(((signed short)181*(signed short)velocity) >> (signed short)8);
;
L006F:	lda     (sp,x)
	jsr     pusha0
	lda     #$B5
	jsr     tosmula0
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0045
	dex
	jmp     incsp2
;
; return (signed short)(((signed short)236*(signed short)velocity) >> (signed short)8);
;
L0077:	lda     (sp,x)
	jsr     pusha0
	lda     #$EC
	jsr     tosmula0
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0045
	dex
	jmp     incsp2
;
; return (signed short)velocity;
;
L007F:	lda     (sp,x)
;
; }
;
L0045:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ getCollisionBallDirection (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getCollisionBallDirection: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; switch(direction)
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
;
; }
;
	beq     L00F0
	cmp     #$01
	beq     L0089
	cmp     #$02
	beq     L0090
	cmp     #$03
	beq     L0097
	cmp     #$04
	jeq     L00F7
	cmp     #$05
	jeq     L00A1
	cmp     #$06
	jeq     L00A8
	cmp     #$07
	jeq     L00AF
	cmp     #$08
	jeq     L00EF
	cmp     #$09
	jeq     L00B9
	cmp     #$0A
	jeq     L00C0
	cmp     #$0B
	jeq     L00C7
	cmp     #$0C
	jeq     L0105
	cmp     #$0D
	jeq     L00D1
	cmp     #$0E
	jeq     L00D8
	cmp     #$0F
	jeq     L00DF
	jmp     L00EF
;
; return 8;
;
L00F0:	lda     #$08
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 7 : 15;
;
L0089:	lda     (sp,x)
	cmp     #$01
	bne     L00F1
	lda     #$07
	jmp     incsp2
L00F1:	lda     #$0F
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 6 : 14;
;
L0090:	lda     (sp,x)
	cmp     #$01
	bne     L00F3
	lda     #$06
	jmp     incsp2
L00F3:	lda     #$0E
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 5 : 13;
;
L0097:	lda     (sp,x)
	cmp     #$01
	bne     L00F5
	lda     #$05
	jmp     incsp2
L00F5:	lda     #$0D
	jmp     incsp2
;
; return 12;
;
L00F7:	lda     #$0C
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 3 : 11;
;
L00A1:	lda     (sp,x)
	cmp     #$01
	bne     L00F8
	lda     #$03
	jmp     incsp2
L00F8:	lda     #$0B
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 2 : 10;
;
L00A8:	lda     (sp,x)
	cmp     #$01
	bne     L00FA
	lda     #$02
	jmp     incsp2
L00FA:	lda     #$0A
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 1 : 9;
;
L00AF:	lda     (sp,x)
	cmp     #$01
	beq     L0084
	lda     #$09
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 15 : 7;
;
L00B9:	lda     (sp,x)
	cmp     #$01
	bne     L00FF
	lda     #$0F
	jmp     incsp2
L00FF:	lda     #$07
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 14 : 6;
;
L00C0:	lda     (sp,x)
	cmp     #$01
	bne     L0101
	lda     #$0E
	jmp     incsp2
L0101:	lda     #$06
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 13 : 5;
;
L00C7:	lda     (sp,x)
	cmp     #$01
	bne     L0103
	lda     #$0D
	jmp     incsp2
L0103:	lda     #$05
	jmp     incsp2
;
; return 4;
;
L0105:	lda     #$04
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 11 : 3;
;
L00D1:	lda     (sp,x)
	cmp     #$01
	bne     L0106
	lda     #$0B
	jmp     incsp2
L0106:	lda     #$03
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 10 : 2;
;
L00D8:	lda     (sp,x)
	cmp     #$01
	bne     L0108
	lda     #$0A
	jmp     incsp2
L0108:	lda     #$02
	jmp     incsp2
;
; return surfaceIsHorizontal == TRUE ? 9 : 1;
;
L00DF:	lda     (sp,x)
	cmp     #$01
	bne     L010A
	lda     #$09
	jmp     incsp2
L010A:	tya
	jmp     incsp2
;
; return 0;
;
L00EF:	txa
;
; }
;
L0084:	jmp     incsp2

.endproc

